Description: >
  Kelvin Otuya / Etiam Innovation Systems
  This template deploys a VPC. with a pair of public and private subnet accross two availabilty zones.
  It deploys an Internet Gateway, with route on the public sunbets. It deploys a pair of NAT Gateways.

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed
    Type: String
  
  VpcCIDR:
    Description: Please enter IP range (CIDR notation) for this 
    Type: String
    Default: 10.0.0.0/16
  
  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for this 
    Type: String 
    Default: 10.0.0.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for this 
    Type: String 
    Default: 10.0.1.0/24

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for this 
    Type: String 
    Default: 10.0.2.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for this 
    Type: String 
    Default: 10.0.3.0/24

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags: 
      - Key:  Name
        Value: !Ref EnvironmentName

  #Internet access for VPC
  InternetGateway:
    Type: AWS::EC2::InternetGateway 
    DependsOn: VPC 
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment 
    #Notice, IGW can not be attache to VPC unless both are created
    Properties:
      VpcId: !Ref VPC 
      InternetGatewayId: !Ref InternetGateway

    # Add 4 subnets (2 public and 2 private:)
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1CIDR
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list 
      MapPublicIpOnLaunch: true       
      Tags:
      - Key: Name
        Value: !Sub ${EnvironmentName} Public Subnet 1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2CIDR
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the second AZ in the list  
      MapPublicIpOnLaunch: true 
      Tags:
      - Key: Name
        Value: !Sub ${EnvironmentName} Public Subnet 2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1CIDR
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list  
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: !Sub ${EnvironmentName} Private Subnet 1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2CIDR
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the second AZ in the list
      MapPublicIpOnLaunch: false  
      Tags:
      - Key: Name
        Value: !Sub ${EnvironmentName} Private Subnet 2

  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: VPC
     
  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: VPC
  
  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
     
  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2
  
  
      